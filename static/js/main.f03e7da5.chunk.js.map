{"version":3,"sources":["const.js","Cells.js","Game.js","index.js"],"names":["KEYS","DIRS","37","38","39","40","Cells","board","handleKey","cells","row","col","value","key","className","push","tabIndex","onKeyDown","style","width","COLS","height","ROWS","Game","props","event","direction","nativeEvent","keyCode","diff","Math","abs","state","nextDirection","snake","gameOver","start","bind","frame","this","setState","head","getNextIndex","food","length","indexOf","i","floor","random","pop","unshift","setTimeout","x","y","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f03e7da5.chunk.js","sourcesContent":["export const ROWS = 20, COLS = 20, CELL = 30;\r\nexport const BODY = 1, FOOD = 2;\r\nexport const START =  44;\r\nexport const KEYS = { \r\n    left: 37, up: 38, right: 39, down: 40\r\n};\r\nexport const DIRS = { 37: true, 38: true, 39: true, 40: true}","import React from 'react';\r\nimport {COLS,CELL, ROWS, BODY, FOOD} from './const';\r\n\r\nfunction Cells({ board, handleKey }) {\r\n    const cells = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n        for (let col = 0; col < COLS; col++) {\r\n            const value = board[COLS * row + col]; //pobrana komorka\r\n            const key = COLS * row + col //od 0 do 400  ---cols = 20 --row=20 ---col = 0 do 19\r\n            const className = value === BODY ? 'body-cell' : value === FOOD ? 'food-cell' : 'cell';\r\n            cells.push(<div key={key} className={className}/>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n        tabIndex={0}\r\n        onKeyDown={handleKey}\r\n        style={{width:COLS*CELL, height: ROWS*CELL}}\r\n        className=\"board\">\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cells","import React, {Component} from 'react'\r\nimport Cells from './Cells';\r\nimport {START, BODY, FOOD, KEYS, COLS, ROWS, DIRS} from './const';\r\n\r\nimport './style.css';\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: [],\r\n            snake: [],\r\n            direction: null,\r\n            gameOver: false,\r\n        };\r\n        this.start = this.start.bind(this);\r\n        this.frame = this.frame.bind(this)\r\n        this.handleKey = this.handleKey.bind(this)\r\n    }\r\n\r\ncomponentDidMount() { //po zbudowaniu sie componentu scrow bedziemy uruchamiac funkcje start\r\n    this.start();\r\n}\r\n\r\n    start() {\r\n        const board = [];\r\n        const snake = [START];\r\n        board[START] =  BODY;\r\n        \r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction: KEYS.right,\r\n\r\n        }, ()=> {\r\n            this.frame(); //po wywolaniu setstate wywolaj ta funkcje\r\n        })\r\n    }\r\n    handleKey = (event) => {\r\n        const direction = event.nativeEvent.keyCode;\r\n        const diff = Math.abs(this.state.direction - direction)\r\n        if(DIRS[direction] && diff !== 0 && diff !==2){\r\n            this.nextDirection = direction;\r\n        }\r\n    }\r\n \r\n\r\n    frame() {\r\n        let {snake, board, direction} = this.state;\r\n        const head = this.getNextIndex(snake[0], direction)\r\n        const food = board[head] === FOOD || snake.length === 1;\r\n    \r\n        if(snake.indexOf(head) !== -1) {\r\n            this.setState({ gameOver: true});\r\n            return;\r\n        }\r\n\r\n\r\n        if(food) {\r\n            const maxCells = ROWS * COLS;\r\n            let i;\r\n            do {\r\n                i = Math.floor(Math.random() * maxCells)\r\n            }\r\n            while(board[i]) {\r\n                board[i] = FOOD\r\n            }\r\n        }\r\n        else {\r\n        board[snake.pop()] = null //usuniecie ostatniego elementu\r\n        }\r\n\r\n        board[head] = BODY; // nowa pozycja glowy\r\n        snake.unshift(head) //dodaje nowy element na poczatek tablicy dla snake\r\n      \r\n\r\n       if(this.nextDirection) {\r\n           direction = this.nextDirection;\r\n           this.nextDirection = null;\r\n       }\r\n\r\n       \r\n\r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction,\r\n        }, () => {\r\n            setTimeout(this.frame, 200)\r\n        })\r\n    }\r\n\r\n    getNextIndex(head, direction) {\r\n        let x = head % COLS;\r\n        let y = Math.floor(head/COLS)\r\n        switch(direction) {\r\n            case KEYS.up: y= y <=0 ? ROWS - 1 : y - 1; break;\r\n            case KEYS.down: y=y>=ROWS ? 0 : y+1; break;\r\n            case KEYS.left: x = x<=0 ? COLS - 1 : x -1; break;\r\n            case KEYS.right: x = x >= COLS-1 ? 0 : x + 1; break; //--------- //powrot z prawej na lewo\r\n            default: return;\r\n        }\r\n        return (COLS * y) + x\r\n    }\r\n\r\n\r\n    render() {\r\n        const {board} = this.state;\r\n        return (\r\n            <>\r\n                <Cells \r\n                handleKey={this.handleKey}\r\n                board={board}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game'\nReactDOM.render(<Game/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}